diff -urN src/krnl_vadd.cpp src_modified/krnl_vadd.cpp
--- src/krnl_vadd.cpp	2024-05-22 23:45:35.915164000 -0600
+++ src_modified/krnl_vadd.cpp	2024-05-22 23:46:06.848988000 -0600
@@ -82,7 +82,8 @@
 // Includes
 #include <stdint.h>
 #include <hls_stream.h>
-
+#include "ap_int.h"
+#include "ap_axi_sdata.h"
 #define DATA_SIZE 4096
 
 // TRIPCOUNT identifier
@@ -116,7 +117,15 @@
         out[i] = out_stream.read();
     }
 }
-
+typedef ap_axis<16, 0, 0, 0> pkt;
+static void dss_process( int *wave, hls::stream<pkt> &s_in) {
+   for (int i = 0; i < 1024; i++) 
+   {
+        #pragma HLS PIPELINE II = 1
+        pkt value = s_in.read();
+        wave[i] = value.data;
+    }
+}
 extern "C" {
 
 /*
@@ -129,11 +138,12 @@
         size (input)  --> Number of elements in vector
 */
 
-void krnl_vadd(uint32_t* in1, uint32_t* in2, uint32_t* out, int size) {
+void krnl_vadd(uint32_t* in1, uint32_t* in2, uint32_t* out, int size, int *wave_out, hls::stream<pkt> &dds_in) {
 #pragma HLS INTERFACE m_axi port = in1 bundle = gmem0
 #pragma HLS INTERFACE m_axi port = in2 bundle = gmem1
 #pragma HLS INTERFACE m_axi port = out bundle = gmem0
-
+#pragma HLS INTERFACE m_axi port = wave_out bundle = gmem2
+#pragma HLS INTERFACE axis port = dds_in
     static hls::stream<uint32_t> in1_stream("input_stream_1");
     static hls::stream<uint32_t> in2_stream("input_stream_2");
     static hls::stream<uint32_t> out_stream("output_stream");
@@ -144,5 +154,6 @@
     load_input(in2, in2_stream, size);
     compute_add(in1_stream, in2_stream, out_stream, size);
     store_result(out, out_stream, size);
+    dss_process(wave_out,dds_in);
 }
 }
diff -urN src/vadd.cpp src_modified/vadd.cpp
--- src/vadd.cpp	2024-05-22 23:45:35.919144000 -0600
+++ src_modified/vadd.cpp	2024-05-22 23:43:27.379340000 -0600
@@ -53,7 +53,8 @@
 #include <fstream>
 #include <iostream>
 #include <stdlib.h>
-
+#include "ap_int.h"
+#include <stdio.h>
 static const int DATA_SIZE = 4096;
 
 static const std::string error_message =
@@ -149,14 +150,14 @@
     OCL_CHECK(err, cl::Buffer buffer_a(context, CL_MEM_READ_ONLY, size_in_bytes, NULL, &err));
     OCL_CHECK(err, cl::Buffer buffer_b(context, CL_MEM_READ_ONLY, size_in_bytes, NULL, &err));
     OCL_CHECK(err, cl::Buffer buffer_result(context, CL_MEM_WRITE_ONLY, size_in_bytes, NULL, &err));
-
+    cl::Buffer buffer_waveout(context, CL_MEM_WRITE_ONLY, 1024*sizeof(int));
     // set the kernel Arguments
     int narg = 0;
     OCL_CHECK(err, err = krnl_vector_add.setArg(narg++, buffer_a));
     OCL_CHECK(err, err = krnl_vector_add.setArg(narg++, buffer_b));
     OCL_CHECK(err, err = krnl_vector_add.setArg(narg++, buffer_result));
     OCL_CHECK(err, err = krnl_vector_add.setArg(narg++, DATA_SIZE));
-
+    krnl_vector_add.setArg(narg++,buffer_waveout);
     // We then need to map our OpenCL buffers to get the pointers
     int* ptr_a;
     int* ptr_b;
@@ -173,7 +174,7 @@
         ptr_a[i] = rand() % DATA_SIZE;
         ptr_b[i] = rand() % DATA_SIZE;
     }
-
+    int *ptr_waveout = (int *) q.enqueueMapBuffer (buffer_waveout , CL_TRUE , CL_MAP_READ , 0, 1024*sizeof(int));
     // Data will be migrated to kernel space
     OCL_CHECK(err, err = q.enqueueMigrateMemObjects({buffer_a, buffer_b}, 0 /* 0 means from host*/));
 
@@ -184,7 +185,7 @@
     // order to view the results. This call will transfer the data from FPGA to
     // source_results vector
     OCL_CHECK(err, q.enqueueMigrateMemObjects({buffer_result}, CL_MIGRATE_MEM_OBJECT_HOST));
-
+    q.enqueueMigrateMemObjects({buffer_waveout},CL_MIGRATE_MEM_OBJECT_HOST);
     OCL_CHECK(err, q.finish());
 
     // Verify the result
@@ -197,12 +198,19 @@
             break;
         }
     }
-
+     FILE *fp_dout;
+    fp_dout=fopen("wave_out.txt","w");
+ 
+     for (int i = 0; i < 1024; i++) {
+     fprintf(fp_dout,"%d\n",ptr_waveout[i]<<17);
+     }
+ 
+    fclose(fp_dout);
     OCL_CHECK(err, err = q.enqueueUnmapMemObject(buffer_a, ptr_a));
     OCL_CHECK(err, err = q.enqueueUnmapMemObject(buffer_b, ptr_b));
     OCL_CHECK(err, err = q.enqueueUnmapMemObject(buffer_result, ptr_result));
     OCL_CHECK(err, err = q.finish());
-
+    q.enqueueUnmapMemObject(buffer_waveout , ptr_waveout);
     std::cout << "TEST " << (match ? "FAILED" : "PASSED") << std::endl;
     return (match ? EXIT_FAILURE : EXIT_SUCCESS);
 }
